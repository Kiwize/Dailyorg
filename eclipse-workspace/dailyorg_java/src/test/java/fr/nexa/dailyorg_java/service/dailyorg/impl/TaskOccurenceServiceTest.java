package fr.nexa.dailyorg_java.service.dailyorg.impl;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;

import java.time.LocalDateTime;
import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import fr.nexa.dailyorg_java.model.dailyorg.TaskOccurence;
import fr.nexa.dailyorg_java.repository.dailyorg.ITaskOccurenceRepository;

@ExtendWith(MockitoExtension.class)
public class TaskOccurenceServiceTest {

	
	@Mock
	private ITaskOccurenceRepository taskOccurenceRepository;
	
	@InjectMocks
	private TaskOccurenceService taskOccurenceService;
	
	@Test
	void testFindById() {
		TaskOccurence taskOccurence = TaskOccurence.builder()
				.taskOccurenceId(1L)
				.isAutoGenerated(false)
				.taskOccurenceDate(LocalDateTime.now())
				.userNotes("Test Notes")
				.build();
		
		when(taskOccurenceRepository.findById(1L)).thenReturn(Optional.of(taskOccurence));
		
		TaskOccurence result = taskOccurenceService.findById(1L).orElse(null);
		
		assertThat(result).isNotNull();
	}
	
	@Test
	void testUpdate() {
		TaskOccurence taskOccurence = TaskOccurence.builder()
				.taskOccurenceId(1L)
				.isAutoGenerated(false)
				.taskOccurenceDate(LocalDateTime.now())
				.userNotes("Test Notes")
				.build();
		
		when(taskOccurenceRepository.save(taskOccurence)).thenReturn(taskOccurence);
		
		TaskOccurence result = taskOccurenceService.update(taskOccurence);
		
		assertThat(result.getUserNotes()).isEqualTo("Test Notes");
	}
	
	@Test
	void testCreate() {
		TaskOccurence taskOccurence = TaskOccurence.builder()
				.taskOccurenceId(1L)
				.isAutoGenerated(false)
				.taskOccurenceDate(LocalDateTime.now())
				.userNotes("Test Notes")
				.build();
		
		when(taskOccurenceRepository.save(taskOccurence)).thenReturn(taskOccurence);
		
		TaskOccurence result = taskOccurenceService.create(taskOccurence);
		
		assertThat(result.getUserNotes()).isEqualTo("Test Notes");
	}
	
	@Test
	void testDelete() {
		TaskOccurence taskOccurence = TaskOccurence.builder()
				.taskOccurenceId(1L)
				.isAutoGenerated(false)
				.taskOccurenceDate(LocalDateTime.now())
				.userNotes("Test Notes")
				.build();
		
		taskOccurenceService.delete(taskOccurence);
		
		when(taskOccurenceRepository.findById(1L)).thenReturn(Optional.empty());
		
		Optional<TaskOccurence> result = taskOccurenceService.findById(1L);
		
		assertThat(result).isEmpty();
	}
}
